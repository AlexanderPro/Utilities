using System;
using System.Security.Cryptography;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Utilities.Security.Cryptography.Extensions;

namespace Utilities.Tests.Security.Cryptography
{
    [TestClass]
    public class SymmetricAlgorithmExtensionsTests
    {
        private readonly Byte[] _clearData = new Byte[] {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
            0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
            0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
            0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 
            0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
            0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 
            0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
            0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
            0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
        };

        [TestMethod]
        public void TestDESAlgorithm()
        {
            var provider = new DESCryptoServiceProvider();
            provider.Key = new Byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
            provider.IV = new Byte[] { 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01 };
            provider.Padding = PaddingMode.Zeros;
            provider.Mode = CipherMode.CBC;

            var encodedData = provider.Encrypt(_clearData);
            var decodedData = provider.Decrypt(encodedData);

            CollectionAssert.AreEqual(_clearData, decodedData);
        }

        [TestMethod]
        public void TestTripleDESAlgorithm()
        {
            var provider = new TripleDESCryptoServiceProvider();
            provider.Key = new Byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
            provider.IV = new Byte[] { 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01 };
            provider.Padding = PaddingMode.Zeros;
            provider.Mode = CipherMode.CBC;

            var encodedData = provider.Encrypt(_clearData);
            var decodedData = provider.Decrypt(encodedData);

            CollectionAssert.AreEqual(_clearData, decodedData);
        }

        [TestMethod]
        public void TestRC2Algorithm()
        {
            var provider = new RC2CryptoServiceProvider();
            provider.Key = new Byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
            provider.IV = new Byte[] { 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01 };
            provider.Padding = PaddingMode.Zeros;
            provider.Mode = CipherMode.CBC;

            var encodedData = provider.Encrypt(_clearData);
            var decodedData = provider.Decrypt(encodedData);

            CollectionAssert.AreEqual(_clearData, decodedData);
        }

        [TestMethod]
        public void TestRijndaelAlgorithm()
        {
            var provider = new RijndaelManaged();
            provider.Key = new Byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
            provider.IV = new Byte[] { 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 };
            provider.Padding = PaddingMode.Zeros;
            provider.Mode = CipherMode.CBC;

            var encodedData = provider.Encrypt(_clearData);
            var decodedData = provider.Decrypt(encodedData);

            CollectionAssert.AreEqual(_clearData, decodedData);
        }

        [TestMethod]
        public void TestAesAlgorithm()
        {
            var provider = new AesManaged();
            provider.Key = new Byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
            provider.IV = new Byte[] { 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 };
            provider.Padding = PaddingMode.Zeros;
            provider.Mode = CipherMode.CBC;

            var encodedData = provider.Encrypt(_clearData);
            var decodedData = provider.Decrypt(encodedData);

            CollectionAssert.AreEqual(_clearData, decodedData);
        }
    }
}